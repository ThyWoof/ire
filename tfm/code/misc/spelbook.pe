##########################
#                        #
#  Spell book interface  #
#                        #
##########################



int sp_level = 1
int sp_spell = 1
string spellfunc
string spell_leveltable
string_array spell[6]
string_array spellname[6]

##
##  Entry point
##

function use_spellbook

int x
int y

# Set up the player if need be
call playermagic_start

# Find the spellbook, make sure it's valid
call player_getspellbook

let spellfunc = ""

save_screen

# Set up mouse grid

let x = 200
let y = 144 + 23
mouse_range 1 = x y 256 16
range_pointer 1 = 1
add y + 19

mouse_range 2 = x y 256 16
range_pointer 2 = 1
add y + 19

mouse_range 3 = x y 256 16
range_pointer 3 = 1
add y + 19

mouse_range 4 = x y 256 16
range_pointer 4 = 1
add y + 19

mouse_range 5 = x y 256 16
range_pointer 5 = 1
add y + 19

mouse_range 6 = x y 256 16
range_pointer 6 = 1

mouse_range 7 = 200 319 32 16
range_pointer 7 = 1

mouse_range 8 = 432 319 32 16
range_pointer 8 = 1



# Start the loop

do
	draw_object spellbook_img at 160 120
	textfont 3
	call draw_spellbook
	call draw_spellcursor

	if sp_level > 1
		gotoxy 200 319
		printxy "<<"
	endif
	if sp_level < player.stats.level
		gotoxy 432 319
		printxy ">>"
	endif
	textfont 0



	getkey_quiet

	# Mouse click?
	if key = KEY_MOUSE
		if mouseclick < 7
			# Fake spell shortcut
			let key = mouseclick + KEY_1
			add key - 1
		endif
		if mouseclick = 7
			let key = KEY_LEFT
		endif
		if mouseclick = 8
			let key = KEY_RIGHT
		endif
		flush_mouse BLOCKING
	endif

	# Go through the keys
	if key = KEY_LEFT
		if sp_level > 1
			add sp_level - 1
		endif
	endif

	if key = KEY_RIGHT
		if sp_level < player.stats.level
			add sp_level + 1
		endif
	endif

	if key >= KEY_F1
	and key <= KEY_F8
		let sp_level = key - KEY_F1
		add sp_level + 1
	endif

	if key = KEY_UP
		if sp_spell > 1
			add sp_spell - 1
		endif
	endif

	if key = KEY_DOWN
		if sp_spell < 6
			add sp_spell + 1
		endif
	endif

	if key >= KEY_1
	and key <= KEY_6
		let sp_spell = key - KEY_1
		add sp_spell + 1
		let key = KEY_ENTER
	endif

	if key = KEY_ENTER
		load_screen
		flush_mouse NONBLOCKING

		let spellfunc = spell[sp_spell]
		if spellfunc <> ""
			if_local spellbook spellfunc
				call spellfunc
			endif
		endif

		let key = 0
		flush_mouse NONBLOCKING
		return
	endif

while key <> KEY_ESC

load_screen
let key = 0

end

##
##  Draw the required page of the spellbook
##

function draw_spellbook
private

# Find the list of spells for the given level
get_data spell_leveltable WHERE spell_level_list = sp_level

# Get the spell tags from the list we found above
get_datakeys spell[1] = spell_leveltable

call spellbook_page

end

##
##  Draw the cursor
##

function draw_spellcursor
private
int curpos

let curpos = sp_spell * 19
add curpos + 144

gotoxy 184 curpos
printxy ">"
end



function spellbook_page
private
integer ctr
string levelname
string ring
string spellname
string spellfunc

	# Get title data
	get_data levelname WHERE spell_levelname = sp_level
	get_data ring WHERE spell_ring = sp_level

	gotoxy 200 128
	printxy ring
	gotoxy 308 128
	printxy "("
	printxy levelname
	printxy ")"

	gotoxy 200 128
	printxycr
	printxycr

	for ctr = 1 to 6
		let spellfunc = spell[ctr]
		if spellfunc <> ""
			if_local spellbook spellfunc
				printxy ctr
				printxy ". "

				get_data spellname WHERE spell_leveltable = spellfunc
				printxy spellname
			endif
		endif
		printxycr
	next ctr

end


/*
function draw_spellbook0
private

	gotoxy 176 128
	printxy "The London Borough of"
	printxycr
	printxy "Lambeth once sent a"
	printxycr
	printxy "church four poll-tax"
	printxycr
	printxy "demands. One was for the"
	printxycr
	printxy "vicar, the others were"
	printxycr
	printxy "God the Father, God the "
	printxycr
	printxy "Son and the Holy Ghost."
	printxycr
end
*/


function use_spellcard
object p
let p = current

if me <> player
	return
endif

let current = player

print "Use "
print p.shortdesc
print " on "
redraw_text

call get_far
if_not_exist current
	print "nothing."
	printcr
	return
endif

print current.shortdesc
printcr

if current is called "spellbook"
	# Run the spell
	call p.funcs.user1
	# Delete the card and create a backing paper, which the player drops
	destroy p
	create p = "spellcard_wrapper"
	transfer_object p to player.x player.y
	move_to_floor p
	play_sound "spellbook"

	print "Success!"
	printcr
else
	print "Only on a spellbook."
	return
endif
end

/*
  maim
  MK
*/

/*

1-1	"spell_light"
1-2	"spell_awaken"
1-3	"spell_lheal"
1-4	"spell_sleep"
1-5	"spell_help"
1-6	"spell_identify"

2-1	"spell_ignite"
2-2	"spell_douse"
2-3	"spell_peer"
2-4	"spell_allseeingeye"
2-5	"spell_about"
2-6	"spell_poison"

3-1	"spell_pickpocket"
3-2	"spell_barrier"
3-3	"spell_harm"
3-4	"spell_heal"
3-5	"spell_cure"
3-6	"spell_greatlight"

4-1	"spell_dispelbarrier"
4-2	"spell_mark"
4-3	"spell_recall"
4-4	"spell_explosion"
4-5	"spell_tkuse"
4-6	"spell_push"

5-1	"spell_kill"
5-2	"spell_commandanimal"
5-3	"spell_greatheal"
5-4	"spell_ensorcelment"
5-5	"spell_turnundead"
5-6

6-1	"spell_repelundead"
6-2
6-3	Lightning?
6-4	"spell_alchemy"
6-5	"spell_heartruth"
6-6	"spell_snake"

7-1	"spell_greatkill"
7-2	"spell_devil"
7-3	"spell_posess"
7-4	"spell_confusion"
7-5	"spell_piedpiper"
7-6	"spell_resurrect"

8-1	"spell_xresurrect"
8-2	"spell_abolish"
8-3	"spell_uberpeer"
8-4	"spell_destruction"
8-5
8-6


*/


